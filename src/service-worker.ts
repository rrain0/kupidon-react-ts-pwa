/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */


// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.


import { clientsClaim, WorkboxPlugin } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL, precache, addRoute } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'


declare const self: ServiceWorkerGlobalScope


clientsClaim()



// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA

/* let manifest = self.__WB_MANIFEST
if (manifest) {
  // manifest = [
  //   ...manifest,
  //   {
  //     revision: null,
  //     url: '/manifest.json'
  //   }
  // ]
  precache(manifest)
  addRoute()
  console.log('precached', manifest)
} */

precacheAndRoute(self.__WB_MANIFEST)




// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url, ...rest }: { request: Request; url: URL }) => {
    
    //console.log('request',request)
    //console.log('url',url)
    //console.log('rest',rest)
    
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is an URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like an URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)





/*
  An example runtime caching route for requests that aren't handled by the
  precache, in this case same-origin .png requests like those from in public/
*/
const imageExtensions = ['jpeg','jpg','png','webp','gif','bmp','svg']
const imageExtensionsRegexp = new RegExp(`\\.(${imageExtensions.join('|')})$`,'i')
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin===self.location.origin && imageExtensionsRegexp.test(url.pathname),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }) as WorkboxPlugin,
    ],
  })
)





/*
const manifestJson = {
  // !!! Manifest changes only when reinstalling - may be it because of caching
  
  "name": "Kupidon",
  "short_name": "Kupidon",
  "description": "Kupidon date app",
  "start_url": ".",
  "display": "standalone",
  "orientation": "portrait", // only in installed app mode
  
  
  // Shlashscreen colors can't be overriden by html <meta/>
  // When app has loaded, html <meta/> will override manifest values.
  
  // На нижний бар с полоской навигации андроида эти настройки не влияют
  
  // Title bar of window, status bar on mobile.
  // Splashscreen status bar color.
  // It will be overriden by <meta name="theme-color" ... />.
  //"theme_color": "#f0f0f0",
  //"dark_theme_color": "#282c34",
  "theme_color": "#282c34",
  
  // Window or viewport background - before your app's stylesheets have loaded.
  // Splashscreen bgc color.
  // It will be overriden by <meta name="background-color" ... />.
  //"background_color": "#f0f0f0",
  //"dark_background_color": "#282c34",
  "background_color": "#282c34",
  
  
  "icons": [
    {
      "src": "logo64.png",
      "type": "image/png",
      "sizes": "64x64"
    },{
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },{
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512" // splashscreen icon
    }
  ]
  
} as const
*/



/*
  manifest.json interceptor & generator
*/
/* registerRoute(
  ({ url }) => url.pathname==='/manifest.json',
  async ({ event, request, url, params })=>{
    console.log('request,url', request,url)
    const searchParams = url.searchParams
    const manifest = { ...manifestJson } as Record<string, any>
    manifest.id = `kupidon-react-pwa-${searchParams.get('nodeEnv')}`
    return new Response(
      JSON.stringify(manifest),
      {
        headers: {
          //'Content-Type': 'application/json',
          'Content-Type': 'application/manifest+json',
        }
      }
    )
  }
) */



/*
  This allows the web app to trigger skipWaiting via
  registration.waiting.postMessage({ type: 'SKIP_WAITING' })
*/
self.addEventListener('message', async ev=>{
  switch (ev.data?.type){
    case 'SKIP_WAITING':
      self.skipWaiting()
      break
    case 'console.log':
      console.log('console.log',ev)
      break
    case 'clear-cache':
      // Service Worker won't be stopped until Promise passed to 'waitUtil' is settled.
      ev.waitUntil(
        (async()=>{
          await clearCache()
          ev.ports[0]?.postMessage({ type: 'cache cleared' })
        })()
      )
      //self.registration.unregister()
      break
  }
})




// Any other custom service worker logic can go here.



export async function clearCache(): Promise<void> {
  const entryKeys = await caches.keys()
  await Promise.allSettled(entryKeys.map(key=>caches.delete(key)))
}